import { type ConfigOverrides } from '../clientConfig.js';

import type ExperimentSearchPostParams from './experimentSearchPost.parameters.js';

import { type ResponseDEFAULTERROR } from '../responses/DEFAULT_ERROR.js';
import { type ResponseUNPROCESSABLEENTITY } from '../responses/UNPROCESSABLE_ENTITY.js';
import type ExperimentSearchPostResponse from './experimentSearchPost.responses.js';
import { type Response200 } from './experimentSearchPost.responses.js';

/**
 * Get a paginated list of experiments based on the provided JSON query
and MongoDB format.
 * 
 * autogenerated
 * 
 * @async
 **/
const experimentSearchPost = async (
  parameters: ExperimentSearchPostParams & { config?: ConfigOverrides },
): Promise<ExperimentSearchPostResponse> => {
  const { body, params: { page, page_size, sort_by, order_by } = {}, config } = parameters;
  const url = `${config?.basePath ?? ''}/experiment/search`;
  const localFetch = config?.fetch ?? fetch;
  const headers = new Headers(config?.defaultParams?.headers);

  if (config?.auth?.bearer != null) {
    headers.set('authorization', `Bearer ${config.auth.bearer}`);
  }
  headers.set('Content-Type', 'application/json');

  const method = 'POST';
  const requestMeta = {
    url,
    method,
    parameters,
  };

  const response = await localFetch(
    `${url}?${new URLSearchParams({
      ...(page != null && { ['page']: page.toString() }),
      ...(page_size != null && { ['page_size']: page_size.toString(), }),
      ...(sort_by != null && { ['sort_by']: sort_by }),
      ...(order_by != null && { ['order_by']: order_by }),
    }).toString()}`,
    {
      ...config?.defaultParams,
      method,
      headers,
      body: JSON.stringify(body),
    },
  );

  switch (response.status) {
    case 200:
      return {
        status: 200,
        data: (await response.json()) as Response200,
        response,
        request: requestMeta,
      };
    case 422:
      return {
        status: 422,
        data: (await response.json()) as ResponseUNPROCESSABLEENTITY,
        response,
        request: requestMeta,
      };
    default:
      if (response.status !== 0) {
        return {
          status: 'default',
          data: (await response.json()) as ResponseDEFAULTERROR,
          response,
          request: requestMeta,
        };
      }
      return {
        status: -1,
        response,
        request: requestMeta,
      };
  }
};

export default experimentSearchPost;
