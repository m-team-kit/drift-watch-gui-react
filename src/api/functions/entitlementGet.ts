import { type ConfigOverrides } from '../clientConfig.js';

import { type ResponseDEFAULT_ERROR } from '../responses/DEFAULT_ERROR.js';
import type EntitlementGetResponse from './entitlementGet.responses.js';
import {
  type Response200,
  type Response401,
  type Response403,
} from './entitlementGet.responses.js';

/**
 * Return list of entitlements based on the provided OIDC token.
 *
 * autogenerated
 *
 * @async
 **/
const entitlementGet = async (
  parameters: { config?: ConfigOverrides } = {},
): Promise<EntitlementGetResponse> => {
  const { config } = parameters;
  const url = `${config?.basePath ?? ''}/entitlement`;
  const localFetch = config?.fetch ?? fetch;
  const headers = new Headers(config?.defaultParams?.headers);

  if (config?.auth?.bearer != null) {
    headers.set('authorization', `Bearer ${config.auth.bearer}`);
  }

  const method = 'GET';
  const requestMeta = {
    url,
    method,
  };

  const response = await localFetch(url, {
    ...config?.defaultParams,
    method,
    headers,
  });

  switch (response.status) {
    case 200:
      return {
        status: 200,
        data: (await response.json()) as Response200,
        response,
        request: requestMeta,
      };
    case 401:
      return {
        status: 401,
        data: (await response.json()) as Response401,
        response,
        request: requestMeta,
      };
    case 403:
      return {
        status: 403,
        data: (await response.json()) as Response403,
        response,
        request: requestMeta,
      };
    default:
      if (response.status !== 0) {
        return {
          status: 'default',
          data: (await response.json()) as ResponseDEFAULT_ERROR,
          response,
          request: requestMeta,
        };
      }
      return {
        status: -1,
        response,
        request: requestMeta,
      };
  }
};

export default entitlementGet;
